trigger: none
pr: none

pool:
  name: Default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

steps:
##############################
# Step 1: Install NuGet Tool #
##############################
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tool (1/10)'
  inputs:
    versionSpec: 
    checkLatest: true

##################################
# Step 2: Restore NuGet Packages #
##################################
- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages (2/10)'
  inputs:
    restoreSolution: '$(solution)'

##########################
# Step 3: Build Solution #
##########################
- task: VSBuild@1
  displayName: 'Build Solution (3/10)'
  inputs:
    solution: '$(solution)'
    vsVersion: '17.0'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    maximumCpuCount: true
    msbuildArchitecture: 'x64'
    createLogFile: true
    logFileVerbosity: 'detailed'

#################################################
# Step 4: Archive Files to ZIP (ArchiveFiles@2) #
#################################################
- task: ArchiveFiles@2
  displayName: 'Archive Files to ZIP (4/10)'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.CommitId).zip'
    replaceExistingArchive: true
    verbose: true

###################################
# Step 5: Calculate ZIP File Hash #
###################################
- task: CmdLine@2
  displayName: 'Calculate ZIP File Hash (5/10)'
  inputs:
    script: |
      @echo off
      setlocal EnableDelayedExpansion
      rem Define the full path of the ZIP file from Step 8
      set "ZIP_PATH=$(Build.ArtifactStagingDirectory)\$(Build.CommitId).zip"
      echo Calculating SHA-256 hash for ZIP file: %ZIP_PATH%
      for /F "skip=1 tokens=1" %%Z in ('certutil -hashfile "%ZIP_PATH%" SHA256 ^| findstr /V "CertUtil"') do (
          set "ZIP_HASH=%%Z"
          goto :gotHash
      )
      :gotHash
      echo ZIP file hash: !ZIP_HASH!
      rem Create a hash file in the artifact staging directory with the commit ID on the first line
      echo $(Build.CommitId) > "$(Build.ArtifactStagingDirectory)\$(Build.CommitId)_hashes.txt"
      echo !ZIP_HASH! >> "$(Build.ArtifactStagingDirectory)\$(Build.CommitId)_hashes.txt"
      endlocal
      echo Hash calculation completed.

#######################################################
# Step 6: Push NuGet Packages to Azure Artifacts Feed #
#######################################################
- task: NuGetCommand@2
  displayName: 'Push NuGet Packages to Azure Artifacts (6/10)'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '4a801188-824e-4a83-b4e5-7fdcc78c6c71/05698a6e-affb-4164-b5f8-c68b8e1a2c92'
    allowPackageConflicts: true

############################################################
# Step 7: Publish Build Artifacts (Pipeline Output Folder) #
############################################################
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts (Pipeline Folder) (7/10)'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

###################################################
# Step 8: Create GitHub Release (Pre-release Tag) #
###################################################
- task: GitHubRelease@1
  displayName: 'Create GitHub Release (Pre-release) (8/10)'
  inputs:
    gitHubConnection: 'zombi-dev-org'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    title: 'Commit $(Build.SourceVersion)'
    assets: '$(Build.ArtifactStagingDirectory)/**/*'
    isPreRelease: true
    changeLogCompareToRelease: 'lastNonDraftRelease'
    changeLogType: 'commitBased'

#######################################################
# Step 9: Publish Pipeline Artifact (Build Workspace) #
#######################################################
- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact (9/10)'
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: '$(Build.SourceVersion) - $(Build.BuildId)'
    publishLocation: 'pipeline'

################################################################
# Step 10: Update README.md with Build Info and Commit Changes #
################################################################
- task: CmdLine@2
  displayName: 'Update README.md with Build Info (10/10)'
  inputs:
    script: |
      @echo off
      echo Updating README.md with dynamic build information...
      
      rem Retrieve pipeline variables for commit details
      set "COMMIT_ID=$(Build.SourceVersion)"
      set "COMMIT_LINK=https://github.com/zombi-dev-org/Project-Multiground/commit/%COMMIT_ID%"
      set "ARTIFACT_LINK=https://github.com/zombi-dev-org/Project-Multiground/actions/runs/$(Build.BuildId)"
      set "RELEASE_LINK=https://github.com/zombi-dev-org/Project-Multiground/releases/tag/Pre-release"
      
      rem Use PowerShell inline commands to update README.md placeholders
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit ID\]\]', '%COMMIT_ID%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit link\]\]', '%COMMIT_LINK%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit artifact''s link\]\]', '%ARTIFACT_LINK%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit release link\]\]', '%RELEASE_LINK%' | Set-Content README.md"
      
      rem Use built-in variables for email and user
      set "EMAIL=$(Build.RequestedForEmail)"
      set "USER=$(Build.RequestedFor)"
      
      echo Configuring git with email: %EMAIL% and user: %USER%
      git config --global user.email "%EMAIL%"
      git config --global user.name "%USER%"
      
      git add README.md
      git commit -m "Update README.md for %COMMIT_ID%"
      git push origin HEAD:latest
      
      echo README.md updated and changes pushed.
      echo Done!
