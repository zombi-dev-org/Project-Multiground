trigger: none
pr: none

pool:
  name: Default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

steps:
##############################
# Step 1: Install NuGet Tool #
##############################
- task: NuGetToolInstaller@1
  displayName: 'Restore NuGet Packages (1/9)'
  inputs:
    versionSpec:
    checkLatest: true

##################################
# Step 2: Restore NuGet Packages #
##################################
- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages (2/9)'
  inputs:
    restoreSolution: '$(solution)'

##########################
# Step 3: Build Solution #
##########################
- task: VSBuild@1
  displayName: 'Build Solution (3/9)'
  inputs:
    solution: '$(solution)'
    vsVersion: '17.0'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    maximumCpuCount: true
    msbuildArchitecture: 'x64'
    createLogFile: true
    logFileVerbosity: 'detailed'

#######################################################
# Step 4: Push NuGet Packages to Azure Artifacts Feed #
#######################################################
- task: NuGetCommand@2
  displayName: 'Push NuGet Packages to Azure Artifacts (4/9)'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '4a801188-824e-4a83-b4e5-7fdcc78c6c71/05698a6e-affb-4164-b5f8-c68b8e1a2c92'
    allowPackageConflicts: true

############################################################
# Step 5: Publish Build Artifacts (Pipeline Output Folder) #
############################################################
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts (Pipeline Folder) (5/9)'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

###################################################
# Step 6: Create GitHub Release (Pre-release Tag) #
###################################################
- task: GitHubRelease@1
  displayName: 'Create GitHub Release (Pre-release) (6/9)'
  inputs:
    gitHubConnection: 'zombi-dev-org'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    title: 'Release $(Build.SourceVersion)'
    assets: '$(Build.ArtifactStagingDirectory)/**/*'
    isPreRelease: true
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'

#######################################################
# Step 7: Publish Pipeline Artifact (Build Workspace) #
#######################################################
- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact (7/9)'
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: '$(Build.SourceVersion) - $(Build.BuildId)'
    publishLocation: 'pipeline'

#########################################################################################
# Step 8: Package Files, Calculate Hashes and Prepare Artifacts (Batch Script) (8/9)    #
#########################################################################################
- task: CmdLine@2
  displayName: 'Package Files, Calculate Hashes, and Prepare Artifacts (Batch 1/2)'
  inputs:
    script: |
      @echo off
      echo ==============================================
      echo Starting file hash calculation and packaging...
      echo ==============================================
      
      rem Retrieve pipeline variables
      set "COMMIT_ID=$(Build.SourceVersion)"
      set "BUILD_ID=$(Build.BuildId)"
      set "COMMITTER=$(Build.RequestedFor)"
      
      rem Define target directory
      set "TARGET_DIR=$(Build.SourcesDirectory)"
      echo Using target directory: %TARGET_DIR%
      
      rem Define ZIP and HASH file names including the commit ID
      set "ZIP_FILE=build_%COMMIT_ID%.zip"
      set "HASH_FILE=hashes_%COMMIT_ID%.txt"
      
      echo Creating hash file: %HASH_FILE% with commit ID at the top...
      echo Commit ID: %COMMIT_ID% > "%TARGET_DIR%\%HASH_FILE%"
      
      echo Calculating SHA-256 hashes for all files in %TARGET_DIR%...
      for /R "%TARGET_DIR%" %%F in (*) do (
          call :ProcessFile "%%F"
      )
      goto :EOF
      
      :ProcessFile
      rem %1 is the file path; skip if file name matches ZIP or HASH file
      if /I "%~nx1"=="%ZIP_FILE%" goto :EOF
      if /I "%~nx1"=="%HASH_FILE%" goto :EOF
      for /F "skip=1 tokens=1" %%H in ('certutil -hashfile "%~1" SHA256 ^| findstr /V "CertUtil"') do (
          echo %~nx1: %%H >> "%TARGET_DIR%\%HASH_FILE%"
          echo Hashed file: %~nx1 -> %%H
          goto :EOF
      )
      goto :EOF
      rem End of script
      
      echo ==============================================
      echo Packaging complete. Files created:
      echo ZIP File: %ZIP_FILE%
      echo Hash File: %HASH_FILE%
      echo Contents of Hash File:
      type "%TARGET_DIR%\%HASH_FILE%"
      echo ==============================================
      echo Custom upload and API reporting steps are currently disabled.
      echo ==============================================
      echo Finished packaging and preparing artifacts.
      
#########################################################################################
# Step 9: Update README.md with Build Info and Commit Changes (Batch Script) (9/9)       #
#########################################################################################
- task: CmdLine@2
  displayName: 'Update README.md with Build Info (Batch 2/2)'
  inputs:
    script: |
      @echo off
      echo Updating README.md with dynamic build information...
      
      rem Retrieve pipeline variables for commit details
      set "COMMIT_ID=$(Build.SourceVersion)"
      set "COMMIT_LINK=https://github.com/zombi-dev-org/Project-Multiground/commit/%COMMIT_ID%"
      set "ARTIFACT_LINK=https://github.com/zombi-dev-org/Project-Multiground/actions/runs/$(Build.BuildId)"
      set "RELEASE_LINK=https://github.com/zombi-dev-org/Project-Multiground/releases/tag/Pre-release"
      
      rem Use PowerShell inline commands to replace placeholders in README.md
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit ID\]\]', '%COMMIT_ID%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit link\]\]', '%COMMIT_LINK%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit artifact''s link\]\]', '%ARTIFACT_LINK%' | Set-Content README.md"
      powershell -Command "(Get-Content README.md) -replace '\[\[latest commit release link\]\]', '%RELEASE_LINK%' | Set-Content README.md"
      
      echo Checking out branch: $(Build.SourceBranchName)
      git checkout $(Build.SourceBranchName)
      
      rem Use built-in variables for email and user
      set "EMAIL=$(Build.RequestedForEmail)"
      set "USER=$(Build.RequestedFor)"
      
      echo Configuring git with email: %EMAIL% and user: %USER%
      git config --global user.email "%EMAIL%"
      git config --global user.name "%USER%"
      
      git add README.md
      git commit -m "Update README.md for %COMMIT_ID%"
      git push origin $(Build.SourceBranchName)
      
      echo README.md updated and changes pushed.
      echo Done!